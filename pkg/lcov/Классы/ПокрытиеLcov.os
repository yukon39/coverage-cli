// Спецификация формата и процедуры записи/чтения взяты из https://github.com/linux-test-project/lcov

Перем ДанныеПокрытия;

#Область ПрограммныйИнтерфейс

Процедура УстановитьПокрытиеСтроки(ИмяФайла, ИмяТеста, НомерСтроки, КоличествоВызовов) Экспорт
	
	ДанныеПокрытияМодуля = НайтиДобавитьПокрытиеМодуля(ИмяФайла);
	ДанныеПокрытияСтрок = НайтиДобавитьПокрытиеСтрок(ДанныеПокрытияМодуля, ИмяТеста);
	
	УстановитьПокрытиеСтрокиВнутренний(ДанныеПокрытияСтрок, НомерСтроки, КоличествоВызовов);
	
КонецПроцедуры

Процедура Записать(ИмяФайла) Экспорт
	
	Файл = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	
	Для Каждого КлючИЗначение Из ДанныеПокрытия Цикл
		ЗаписатьДанныеМодуля(Файл, КлючИЗначение.Значение);
	КонецЦикла;
	
	Файл.Закрыть();
	
КонецПроцедуры

Процедура Прочитать(ИмяФайла) Экспорт
	
	ДанныеПокрытия = Новый Соответствие;
	Файл = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
	
	КонтекстЗагрузки = НовыйКонтекстЗагрузки(Файл);
	
	ПрочитатьСтроку(КонтекстЗагрузки);
	Пока КонтекстЗагрузки.ТекущаяСтрока <> Неопределено Цикл
		
		ЗагрузитьДанныеТеста(КонтекстЗагрузки);
		
		ПрочитатьСтроку(КонтекстЗагрузки);
		
	КонецЦикла;
	
	Файл.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриСозданииОбъекта() Экспорт
	ДанныеПокрытия = Новый Соответствие;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиДобавитьПокрытиеМодуля(ИмяФайла)
	
	ДанныеПокрытияМодуля = ДанныеПокрытия.Получить(ИмяФайла);
	Если ДанныеПокрытияМодуля = Неопределено Тогда
		ДанныеПокрытияМодуля = НовыйПокрытиеМодуля(ИмяФайла);
		ДанныеПокрытия.Вставить(ИмяФайла, ДанныеПокрытияМодуля);
	КонецЕсли;
	
	Возврат ДанныеПокрытияМодуля;
	
КонецФункции

Функция НовыйПокрытиеМодуля(ИмяФайла)
	
	ПокрытиеМодуля = Новый Структура;
	ПокрытиеМодуля.Вставить("ИмяФайла", ИмяФайлаДляЗаписи(ИмяФайла));
	ПокрытиеМодуля.Вставить("МетодыМодуля", Новый Соответствие);
	ПокрытиеМодуля.Вставить("ПокрытиеСтрок", Новый Соответствие);
	ПокрытиеМодуля.Вставить("ПокрытиеМетодов", Новый Соответствие);
	ПокрытиеМодуля.Вставить("ПокрытиеВеток", Новый Соответствие);
	ПокрытиеМодуля.Вставить("КонтрольныеСуммы", Новый Соответствие);
	
	Возврат ПокрытиеМодуля;
	
КонецФункции

Функция НайтиДобавитьПокрытиеСтрок(ДанныеПокрытияМодуля, ИмяТеста)
	
	ДанныеПокрытияСтрок = ДанныеПокрытияМодуля.ПокрытиеСтрок.Получить(ИмяТеста);
	Если ДанныеПокрытияСтрок = Неопределено Тогда
		ДанныеПокрытияСтрок = Новый Соответствие;
		ДанныеПокрытияМодуля.ПокрытиеСтрок.Вставить(ИмяТеста, ДанныеПокрытияСтрок);
	КонецЕсли;
	
	Возврат ДанныеПокрытияСтрок;
	
КонецФункции

Функция НайтиДобавитьПокрытиеМетодов(ДанныеПокрытияМодуля, ИмяТеста)
	
	ДанныеПокрытиеМетодов = ДанныеПокрытияМодуля.ПокрытиеМетодов.Получить(ИмяТеста);
	Если ДанныеПокрытиеМетодов = Неопределено Тогда
		ДанныеПокрытиеМетодов = Новый Соответствие;
		ДанныеПокрытияМодуля.ПокрытиеМетодов.Вставить(ИмяТеста, ДанныеПокрытиеМетодов);
	КонецЕсли;
	
	Возврат ДанныеПокрытиеМетодов;
	
КонецФункции

Функция НайтиДобавитьПокрытиеВеток(ДанныеПокрытияМодуля, ИмяТеста)
	
	ДанныеПокрытиеВеток = ДанныеПокрытияМодуля.ПокрытиеВеток.Получить(ИмяТеста);
	Если ДанныеПокрытиеВеток = Неопределено Тогда
		ДанныеПокрытиеВеток = Новый Соответствие;
		ДанныеПокрытияМодуля.ПокрытиеВеток.Вставить(ИмяТеста, ДанныеПокрытиеВеток);
	КонецЕсли;
	
	Возврат ДанныеПокрытиеВеток;
	
КонецФункции

Процедура УстановитьПокрытиеСтрокиВнутренний(ДанныеПокрытияСтрок, НомерСтроки, КоличествоВызовов)
	
	КоличествоВызововСтроки = ДанныеПокрытияСтрок.Получить(НомерСтроки);
	Если КоличествоВызововСтроки = Неопределено Тогда
		КоличествоВызововСтроки = КоличествоВызовов;
	Иначе
		КоличествоВызововСтроки = КоличествоВызововСтроки + КоличествоВызовов;
	КонецЕсли;
	
	ДанныеПокрытияСтрок.Вставить(НомерСтроки, КоличествоВызововСтроки);
	
КонецПроцедуры

Функция ИмяФайлаДляЗаписи(ИмяФайла)
	
	Если ПолучитьРазделительПути() = "\" Тогда
		Возврат СтрЗаменить(ИмяФайла, "\", "/");
	Иначе
		Возврат ИмяФайла;
	КонецЕсли;
	
КонецФункции

#Область ЗаписьФормата

Процедура ЗаписатьДанныеМодуля(Файл, ПокрытиеМодуля)
	
	Для Каждого ПокрытиеСтрок Из ПокрытиеМодуля.ПокрытиеСтрок Цикл
		ЗаписатьДанныеТеста(Файл, ПокрытиеСтрок.Ключ, ПокрытиеМодуля);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДанныеТеста(Файл, ИмяТеста, ПокрытиеМодуля)
	
	ИмяФайла = ПокрытиеМодуля.ИмяФайла;
	КонтрольныеСуммы = ПокрытиеМодуля.КонтрольныеСуммы;
	
	ПокрытиеСтрок = ПокрытиеМодуля.ПокрытиеСтрок.Получить(ИмяТеста);
	ПокрытиеМетодов = ПокрытиеМодуля.ПокрытиеМетодов.Получить(ИмяТеста);
	ПокрытиеВеток = ПокрытиеМодуля.ПокрытиеВеток.Получить(ИмяТеста);
	
	ДобавитьЗаписьВФайл(Файл, "TN", ИмяТеста);
	ДобавитьЗаписьВФайл(Файл, "SF", ИмяФайла);
	
	ЗаписатьМетодыМодуля(Файл, ПокрытиеМодуля);
	
	ЗаписатьПокрытиеМетодов(Файл, ПокрытиеМетодов);
	ЗаписатьПокрытиеВеток(Файл, ПокрытиеВеток);
	ЗаписатьПокрытиеСтрок(Файл, ПокрытиеСтрок, КонтрольныеСуммы);
	
	Файл.ЗаписатьСтроку("end_of_record");
	
КонецПроцедуры

Процедура ЗаписатьМетодыМодуля(Файл, ПокрытиеМодуля)
	
	МетодыМодуля = ПокрытиеМодуля.МетодыМодуля;
	Если МетодыМодуля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого МетодМодуля Из МетодыМодуля Цикл
		
		ИмяМетода = МетодМодуля.Ключ;
		НачальнаяСтрока = МетодМодуля.Значение;
		
		ДобавитьЗаписьВФайл(Файл, "FN", НачальнаяСтрока, ИмяМетода);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьПокрытиеМетодов(Файл, ПокрытиеМетодов)
	
	Если ПокрытиеМетодов = Неопределено Или ПокрытиеМетодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МетодовКПокрытию = ПокрытиеМетодов.Количество();
	ПокрытоМетодов = 0;
	Для Каждого ПокрытиеМетода Из ПокрытиеМетодов Цикл
		
		ИмяМетода = ПокрытиеМетода.Ключ;
		КоличествоВызовов = ПокрытиеМетода.Значение;
		
		ДобавитьЗаписьВФайл(Файл, "FNDA", КоличествоВызовов, ИмяМетода);
		
		Если КоличествоВызовов > 0 Тогда
			ПокрытоМетодов = ПокрытоМетодов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьЗаписьВФайл(Файл, "FNF", МетодовКПокрытию);
	ДобавитьЗаписьВФайл(Файл, "FNH", ПокрытоМетодов);
	
КонецПроцедуры

Процедура ЗаписатьПокрытиеВеток(Файл, ПокрытиеВеток)
	
	Если ПокрытиеВеток = Неопределено Или ПокрытиеВеток.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВетокКПокрытию = 0;
	ВетокПокрыто = 0;
	
	Для Каждого ПокрытиеВетки Из ПокрытиеВеток Цикл
		
		НомерСтроки = ПокрытиеВетки.Ключ;
		brdata = ПокрытиеВетки.Значение;
		
		Для Каждого brentry Из СтрРазделить(brdata, ":") Цикл
			
			_brentry = СтрРазделить(brentry, ",", Ложь);
			block = _brentry[0];
			branch = _brentry[1];
			taken = _brentry[2];
			
			ДобавитьЗаписьВФайл(Файл, "BRDA", НомерСтроки, block, branch, taken);
			
			ВетокКПокрытию = ВетокКПокрытию + 1;
			Если taken <> "-" И taken > 0 Тогда
				ВетокПокрыто = ВетокПокрыто + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВетокКПокрытию > 0 Тогда
		ДобавитьЗаписьВФайл(Файл, "BRF", ВетокКПокрытию);
		ДобавитьЗаписьВФайл(Файл, "BRH", ВетокПокрыто);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьПокрытиеСтрок(Файл, ПокрытиеСтрок, КонтрольныеСуммы)
	
	Если ПокрытиеСтрок = Неопределено Или ПокрытиеСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокКПокрытию = ПокрытиеСтрок.Количество();
	ПокрытоСтрок = 0;
	Для Каждого ПокрытиеСтроки Из ПокрытиеСтрок Цикл
		
		НомерСтроки = ПокрытиеСтроки.Ключ;
		КоличествоВызовов = ПокрытиеСтроки.Значение;
		КонтрольнаяСумма = КонтрольныеСуммы.Получить(НомерСтроки);
		
		ДобавитьЗаписьВФайл(Файл, "DA", НомерСтроки, КоличествоВызовов, КонтрольнаяСумма);
		
		Если КоличествоВызовов > 0 Тогда
			ПокрытоСтрок = ПокрытоСтрок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьЗаписьВФайл(Файл, "LF", СтрокКПокрытию);
	ДобавитьЗаписьВФайл(Файл, "LH", ПокрытоСтрок);
	
КонецПроцедуры

Процедура ДобавитьЗаписьВФайл(Файл, Тег, Значение1, Значение2 = Неопределено,
		Значение3 = Неопределено, Значение4 = Неопределено)
	
	МассивЗначений = Новый Массив;
	
	ДобавитьЗначениеТегаВМассив(МассивЗначений, Значение1);
	ДобавитьЗначениеТегаВМассив(МассивЗначений, Значение2);
	ДобавитьЗначениеТегаВМассив(МассивЗначений, Значение3);
	ДобавитьЗначениеТегаВМассив(МассивЗначений, Значение4);
	
	Если МассивЗначений.Количество() = 0 Тогда
		Файл.ЗаписатьСтроку(Тег);
	Иначе
		ДобавляемаяСтрока = СтрШаблон("%1:%2", Тег, СтрСоединить(МассивЗначений, ","));
		Файл.ЗаписатьСтроку(ДобавляемаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗначениеТегаВМассив(МассивЗначений, Значение)
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		МассивЗначений.Добавить(Значение);
	Иначе
		МассивЗначений.Добавить(XMLСтрока(Значение));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеФормата

Функция НовыйКонтекстЗагрузки(Файл)
	
	КонтекстЗагрузки = Новый Структура;
	КонтекстЗагрузки.Вставить("Файл", Файл);
	КонтекстЗагрузки.Вставить("ТекущаяСтрока");
	
	КонтекстЗагрузки.Вставить("ИмяТеста");
	КонтекстЗагрузки.Вставить("ИмяФайла");
	КонтекстЗагрузки.Вставить("ИмяМетода");
	КонтекстЗагрузки.Вставить("НомерСтроки");
	КонтекстЗагрузки.Вставить("КоличествоВызовов");
	КонтекстЗагрузки.Вставить("КонтрольнаяСумма");
	КонтекстЗагрузки.Вставить("block");
	КонтекстЗагрузки.Вставить("branch");
	КонтекстЗагрузки.Вставить("taken");
	
	КонтекстЗагрузки.Вставить("ШаблонИмяТеста", Новый РегулярноеВыражение("^TN:([^,]*)(,diff)?$"));
	КонтекстЗагрузки.Вставить("ШаблонИмяФайла", Новый РегулярноеВыражение("^[SK]F:(.*)$"));
	КонтекстЗагрузки.Вставить("ШаблонИмяМетода", Новый РегулярноеВыражение("^FN:(\d+),([^,]+)$"));
	КонтекстЗагрузки.Вставить("ШаблонПокрытиеМетода", Новый РегулярноеВыражение("^FNDA:(\d+),([^,]+)$"));
	КонтекстЗагрузки.Вставить("ШаблонПокрытиеВетки", Новый РегулярноеВыражение("^BRDA:(\d+),(\d+),(\d+),(\d+|-)$"));
	КонтекстЗагрузки.Вставить("ШаблонПокрытиеСтроки", Новый РегулярноеВыражение("^DA:(\d+),(-?\d+)(,[^,\s]+)?$"));
	КонтекстЗагрузки.Вставить("ШаблонКонецСекции", Новый РегулярноеВыражение("^end_of_record$"));
	
	Возврат КонтекстЗагрузки;
	
КонецФункции

Процедура ПрочитатьСтроку(КонтекстЗагрузки)
	КонтекстЗагрузки.ТекущаяСтрока = КонтекстЗагрузки.Файл.ПрочитатьСтроку();
КонецПроцедуры

Функция ЗначениеСовпадения(Совпадения, НомерГруппы)
	Возврат Совпадения[0].Группы[НомерГруппы].Значение;
КонецФункции

Процедура ЗагрузитьДанныеТеста(КонтекстЗагрузки)
	
	Если ЭтоИмяТеста(КонтекстЗагрузки) Тогда
		ИмяТеста = КонтекстЗагрузки.ИмяТеста;
	Иначе
		Возврат;
	КонецЕсли;
	ПрочитатьСтроку(КонтекстЗагрузки);
	
	Если ЭтоИмяФайла(КонтекстЗагрузки) Тогда
		ИмяФайла = КонтекстЗагрузки.ИмяФайла;
	Иначе
		Возврат;
	КонецЕсли;
	ПрочитатьСтроку(КонтекстЗагрузки);
	
	ДанныеПокрытияМодуля = НайтиДобавитьПокрытиеМодуля(ИмяФайла);
	
	ЗагрузитьДанныеПокрытий(КонтекстЗагрузки, ДанныеПокрытияМодуля, ИмяТеста);
	
КонецПроцедуры

Процедура ЗагрузитьДанныеПокрытий(КонтекстЗагрузки, ДанныеПокрытияМодуля, ИмяТеста)
	
	ДанныеПокрытиеМетодов = НайтиДобавитьПокрытиеМетодов(ДанныеПокрытияМодуля, ИмяТеста);
	ДанныеПокрытиеВеток = НайтиДобавитьПокрытиеВеток(ДанныеПокрытияМодуля, ИмяТеста);
	ДанныеПокрытияСтрок = НайтиДобавитьПокрытиеСтрок(ДанныеПокрытияМодуля, ИмяТеста);
	
	Пока Не ЭтоКонецСекции(КонтекстЗагрузки) Цикл
		
		Если ЭтоПокрытиеСтроки(КонтекстЗагрузки) Тогда
			
			ДанныеПокрытияСтрок.Вставить(КонтекстЗагрузки.НомерСтроки, КонтекстЗагрузки.КоличествоВызовов);
			
			Если ЗначениеЗаполнено(КонтекстЗагрузки.КонтрольнаяСумма) Тогда
				ДанныеПокрытияМодуля.Вставить(КонтекстЗагрузки.НомерСтроки, КонтекстЗагрузки.КонтрольнаяСумма);
			КонецЕсли;
			
		ИначеЕсли ЭтоИмяМетода(КонтекстЗагрузки) Тогда
			
			ДанныеПокрытияМодуля.МетодыМодуля(КонтекстЗагрузки.ИмяМетода, КонтекстЗагрузки.НомерСтроки);
			
		ИначеЕсли ЭтоПокрытиеМетода(КонтекстЗагрузки) Тогда
			
			ДанныеПокрытиеМетодов.Вставить(КонтекстЗагрузки.ИмяМетода, КонтекстЗагрузки.КоличествоВызовов);
			
		ИначеЕсли ЭтоПокрытиеВетки(КонтекстЗагрузки) Тогда
			
			КонтекстЗагрузки.НомерСтроки = Неопределено;
			КонтекстЗагрузки.block = Неопределено;
			КонтекстЗагрузки.branch = Неопределено;
			КонтекстЗагрузки.taken = Неопределено;
			
			brentry = СтрШаблон("%1,%2,%3:", КонтекстЗагрузки.block, КонтекстЗагрузки.branch, КонтекстЗагрузки.taken);
			
			ТекущееПокрытиеВетки = ДанныеПокрытиеВеток.Получить(КонтекстЗагрузки.НомерСтроки);
			Если ТекущееПокрытиеВетки = Неопределено Тогда
				ТекущееПокрытиеВетки = brentry;
			Иначе
				ТекущееПокрытиеВетки = ТекущееПокрытиеВетки + brentry;
			КонецЕсли;
			
			ДанныеПокрытиеВеток.Вставить(КонтекстЗагрузки.НомерСтроки, ТекущееПокрытиеВетки);
			
		Иначе
			
			ПрочитатьСтроку(КонтекстЗагрузки);
			Продолжить;
			
		КонецЕсли;
		
		ПрочитатьСтроку(КонтекстЗагрузки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоИмяТеста(КонтекстЗагрузки)
	
	Совпадения = КонтекстЗагрузки.ШаблонИмяТеста.НайтиСовпадения(КонтекстЗагрузки.ТекущаяСтрока);
	Если Совпадения.Количество() = 0 Тогда
		КонтекстЗагрузки.ИмяТеста = Неопределено;
		Возврат Ложь;
		
	Иначе
		КонтекстЗагрузки.ИмяТеста = ЗначениеСовпадения(Совпадения, 1);
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Функция ЭтоИмяФайла(КонтекстЗагрузки)
	
	Совпадения = КонтекстЗагрузки.ШаблонИмяФайла.НайтиСовпадения(КонтекстЗагрузки.ТекущаяСтрока);
	Если Совпадения.Количество() = 0 Тогда
		КонтекстЗагрузки.ИмяФайла = Неопределено;
		Возврат Ложь;
		
	Иначе
		КонтекстЗагрузки.ИмяФайла = ЗначениеСовпадения(Совпадения, 1);
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Функция ЭтоИмяМетода(КонтекстЗагрузки)
	
	Совпадения = КонтекстЗагрузки.ШаблонИмяМетода.НайтиСовпадения(КонтекстЗагрузки.ТекущаяСтрока);
	Если Совпадения.Количество() = 0 Тогда
		
		КонтекстЗагрузки.НомерСтроки = Неопределено;
		КонтекстЗагрузки.ИмяМетода = Неопределено;
		Возврат Ложь;
		
	Иначе
		
		КонтекстЗагрузки.НомерСтроки = ЗначениеСовпадения(Совпадения, 1);
		КонтекстЗагрузки.ИмяМетода = ЗначениеСовпадения(Совпадения, 2);
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Функция ЭтоПокрытиеМетода(КонтекстЗагрузки)
	
	Совпадения = КонтекстЗагрузки.ШаблонПокрытиеМетода.НайтиСовпадения(КонтекстЗагрузки.ТекущаяСтрока);
	Если Совпадения.Количество() = 0 Тогда
		
		КонтекстЗагрузки.НомерСтроки = Неопределено;
		КонтекстЗагрузки.КоличествоВызовов = Неопределено;
		Возврат Ложь;
		
	Иначе
		
		КонтекстЗагрузки.НомерСтроки = ЗначениеСовпадения(Совпадения, 1);
		КонтекстЗагрузки.КоличествоВызовов = ЗначениеСовпадения(Совпадения, 2);
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Функция ЭтоПокрытиеВетки(КонтекстЗагрузки)
	
	Совпадения = КонтекстЗагрузки.ШаблонПокрытиеВетки.НайтиСовпадения(КонтекстЗагрузки.ТекущаяСтрока);
	Если Совпадения.Количество() = 0 Тогда
		
		КонтекстЗагрузки.НомерСтроки = Неопределено;
		КонтекстЗагрузки.block = Неопределено;
		КонтекстЗагрузки.branch = Неопределено;
		КонтекстЗагрузки.taken = Неопределено;
		Возврат Ложь;
		
	Иначе
		
		КонтекстЗагрузки.НомерСтроки = ЗначениеСовпадения(Совпадения, 1);
		КонтекстЗагрузки.block = ЗначениеСовпадения(Совпадения, 2);
		КонтекстЗагрузки.branch = ЗначениеСовпадения(Совпадения, 3);
		КонтекстЗагрузки.taken = ЗначениеСовпадения(Совпадения, 4);
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Функция ЭтоПокрытиеСтроки(КонтекстЗагрузки)
	
	Совпадения = КонтекстЗагрузки.ШаблонПокрытиеСтроки.НайтиСовпадения(КонтекстЗагрузки.ТекущаяСтрока);
	Если Совпадения.Количество() = 0 Тогда
		
		КонтекстЗагрузки.НомерСтроки = Неопределено;
		КонтекстЗагрузки.КоличествоВызовов = Неопределено;
		КонтекстЗагрузки.КонтрольнаяСумма = Неопределено;
		Возврат Ложь;
		
	Иначе
		
		КонтекстЗагрузки.НомерСтроки = ЗначениеСовпадения(Совпадения, 1);
		КонтекстЗагрузки.КоличествоВызовов = ЗначениеСовпадения(Совпадения, 2);
		КонтекстЗагрузки.КонтрольнаяСумма = ЗначениеСовпадения(Совпадения, 3);
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Функция ЭтоКонецСекции(КонтекстЗагрузки)
	
	Если КонтекстЗагрузки.ТекущаяСтрока = Неопределено Тогда
		Возврат Истина;
	Иначе
		Совпадения = КонтекстЗагрузки.ШаблонКонецСекции.НайтиСовпадения(КонтекстЗагрузки.ТекущаяСтрока);
		Возврат (Совпадения.Количество() > 0);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
