
// BSLLS:LatinAndCyrillicSymbolInWord-off

#Использовать "../../../internal/converter"
#Использовать "../../../internal/coverage"

Перем Лог;
Перем ФайлПокрытия;
Перем ФайлВывода;
Перем КаталогПроекта;
Перем КонвертерКонфигурации;
Перем КонвертерыРасширений;
Перем КонвертерыВнешнихМодулей;
Перем ИспользоватьВнутреннийФормат;

Перем ДанныеПокрытия;
Перем РазбиратьКонфигурацию;
Перем РазбиратьРасширения;
Перем РазбиратьВнешниеМодули;

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьКаталогПроекта(ПараметрКаталогПроекта) Экспорт
	КаталогПроекта = ПараметрКаталогПроекта;
КонецПроцедуры

Процедура УстановитьФайлПокрытия(ПараметрФайлПокрытия) Экспорт
	ФайлПокрытия = ПараметрФайлПокрытия;
КонецПроцедуры

Процедура УстановитьФайлВывода(ПараметрФайлВывода) Экспорт
	ФайлВывода = ПараметрФайлВывода;
КонецПроцедуры

Процедура ИспользоватьВнутреннийФормат() Экспорт
	ИспользоватьВнутреннийФормат = Истина;
КонецПроцедуры

Процедура УстановитьКаталогИсходниковКонфигурации(КаталогИсходныхФайлов, ФорматИсходныхФайлов) Экспорт
	КонвертерКонфигурации = Новый КонвертерИменМодулей(КаталогПроекта, КаталогИсходныхФайлов);
	КонвертерКонфигурации.УстановитьОбработчикиПоискаМодулей(ФорматИсходныхФайлов);
КонецПроцедуры

Процедура ДобавитьИсходныеФайлыРасширения(ИмяРасширения, КаталогИсходныхФайлов, ФорматИсходныхФайлов) Экспорт

	КонвертерРасширения = Новый КонвертерИменМодулей(КаталогПроекта, КаталогИсходныхФайлов);
	КонвертерРасширения.УстановитьОбработчикиПоискаМодулей(ФорматИсходныхФайлов);
	КонвертерыРасширений.Вставить(ИмяРасширения, КонвертерРасширения);

КонецПроцедуры

Процедура ДобавитьИсходныеФайлыВнешнегоМодуля(URLМодуля, КаталогИсходныхФайлов, ФорматИсходныхФайлов) Экспорт

	КонвертерВнешнегоМодуля = Новый КонвертерИменМодулей(КаталогПроекта, КаталогИсходныхФайлов);
	КонвертерВнешнегоМодуля.УстановитьОбработчикиПоискаВнешнихМодулей(ФорматИсходныхФайлов);
	КонвертерыВнешнихМодулей.Вставить(URLМодуля, КонвертерВнешнегоМодуля);

КонецПроцедуры

Процедура РазобратьПокрытие() Экспорт

	РазбиратьКонфигурацию = (ТипЗнч(КонвертерКонфигурации) = Тип("КонвертерИменМодулей"));
	РазбиратьРасширения = (КонвертерыРасширений.Количество() > 0);
	РазбиратьВнешниеМодули = (КонвертерыВнешнихМодулей.Количество() > 0);
	
	ДанныеПокрытия = АдаптерФорматаПокрытия();
	ЗамерыПокрытия = АдаптерФорматаЗамеров(ФайлПокрытия);

	ЗамерыПокрытия.РазобратьЗамеры(ЭтотОбъект);

	ДанныеПокрытия.Записать(ФайлВывода);

КонецПроцедуры

Процедура РазобратьДанныеЗамера(ДанныеЗамера) Экспорт

	ПрограммныйМодуль = Неопределено;

	ТипКонтейнера = ДанныеЗамера.ModuleType;
	Если РазбиратьКонфигурацию И ТипКонтейнера = ТипыКонтейнеровПрограммныхМодулей.МодульКонфигурации Тогда
		
		ПрограммныйМодуль = НайтиМодульКонфигурации(ДанныеЗамера);
	
	ИначеЕсли РазбиратьРасширения И ТипКонтейнера = ТипыКонтейнеровПрограммныхМодулей.МодульРасширения Тогда
		
		ПрограммныйМодуль = НайтиМодульРасширения(ДанныеЗамера);
	
	ИначеЕсли РазбиратьВнешниеМодули И ТипКонтейнера = ТипыКонтейнеровПрограммныхМодулей.ВнешнийМодуль Тогда

		ПрограммныйМодуль = НайтиВнешнийМодуль(ДанныеЗамера);

	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПрограммныйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДанныеПокрытия.ДобавитьПокрытие(ПрограммныйМодуль, ДанныеЗамера);

КонецПроцедуры

Функция НоваяСтрокаЗамера() Экспорт

	СтрокаЗамеров = Новый Структура;
	СтрокаЗамеров.Вставить("ModuleType");
	СтрокаЗамеров.Вставить("ObjectId");
	СтрокаЗамеров.Вставить("PropertyId");
	СтрокаЗамеров.Вставить("ExtentionName");
	СтрокаЗамеров.Вставить("URL");
	СтрокаЗамеров.Вставить("LineNo");

	Возврат СтрокаЗамеров;

КонецФункции 

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриСозданииОбъекта(ПараметрКаталогПроекта) Экспорт
	КаталогПроекта = ПараметрКаталогПроекта;
	КонвертерыРасширений = Новый Соответствие;
	КонвертерыВнешнихМодулей = Новый Соответствие;
	ИспользоватьВнутреннийФормат = Ложь;
	Лог = ПараметрыПриложения.Лог();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиМодульКонфигурации(СтрокаПокрытия)
	
	ВидПрограммногоМодуля = СтрокаПокрытия.PropertyId;
	ИДПрограммногоМодуля = СтрокаПокрытия.ObjectId;

	Если КонвертерКонфигурации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат КонвертерКонфигурации.НайтиПрограммныйМодуль(ВидПрограммногоМодуля, ИДПрограммногоМодуля);

КонецФункции

Функция НайтиМодульРасширения(СтрокаПокрытия)

	ИмяРасширения = СтрокаПокрытия.ExtentionName;
	КонвертерРасширения = КонвертерыРасширений[ИмяРасширения];

	Если КонвертерРасширения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидПрограммногоМодуля  = СтрокаПокрытия.PropertyId;
	ИДПрограммногоМодуля   = СтрокаПокрытия.ObjectId;
	Возврат КонвертерРасширения.НайтиПрограммныйМодуль(ВидПрограммногоМодуля, ИДПрограммногоМодуля);
	
КонецФункции

Функция НайтиВнешнийМодуль(СтрокаПокрытия)

	URLМодуля = СтрокаПокрытия.URL;
	КонвертерВнешнегоМодуля = КонвертерыВнешнихМодулей[URLМодуля];
	Если КонвертерВнешнегоМодуля = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидПрограммногоМодуля  = СтрокаПокрытия.PropertyId;
	ИДПрограммногоМодуля   = СтрокаПокрытия.ObjectId;
	Возврат КонвертерВнешнегоМодуля.НайтиПрограммныйМодуль(ВидПрограммногоМодуля, ИДПрограммногоМодуля);
	
КонецФункции

Функция АдаптерФорматаПокрытия()

	Если ИспользоватьВнутреннийФормат Тогда
		Возврат Новый ВнутреннийФорматПокрытия();
	Иначе
		Возврат Новый АдаптерGenericCoverage();
	КонецЕсли;

КонецФункции

Функция АдаптерФорматаЗамеров(ФайлПокрытия)
	
	Файл = Новый Файл(ФайлПокрытия);
	Если Файл.Расширение = ".pff" Тогда
		Возврат Новый АдаптерЗамеровPFF(ФайлПокрытия);

	ИначеЕсли Файл.Расширение = ".xml" Тогда
		Возврат НовыйАдаптерЗамеровRAW41C(ФайлПокрытия);

	ИначеЕсли Файл.Расширение = ".json" Тогда
		Возврат Новый АдаптерЗамеровBSL(ФайлПокрытия);

	Иначе 	
		Возврат Новый АдаптерЗамеровCSV(ФайлПокрытия);

	КонецЕсли;

КонецФункции

Функция НовыйАдаптерЗамеровRAW41C(ФайлПокрытия)

	// Данные замера в RAW41С формате содержат только один контейнер
	Если РазбиратьКонфигурацию Тогда
		ТипКонтейнера = ТипыКонтейнеровПрограммныхМодулей.МодульКонфигурации;
		ПутьКОбъекту = "";
	
	ИначеЕсли РазбиратьРасширения Тогда
		ТипКонтейнера = ТипыКонтейнеровПрограммныхМодулей.МодульРасширения;
		ПутьКОбъекту = ПервыйКлючСоответствия(КонвертерыРасширений);
	
	ИначеЕсли РазбиратьВнешниеМодули Тогда
		ТипКонтейнера = ТипыКонтейнеровПрограммныхМодулей.ВнешнийМодуль;
		ПутьКОбъекту = ПервыйКлючСоответствия(КонвертерыВнешнихМодулей);
	Иначе
		ТипКонтейнера = Неопределено;
		ПутьКОбъекту = "";
	КонецЕсли;

	Возврат Новый АдаптерЗамеровRAW41C(ФайлПокрытия, ТипКонтейнера, ПутьКОбъекту);

КонецФункции

Функция ПервыйКлючСоответствия(Коллекция)

	Для каждого КлючИЗначение Из Коллекция Цикл
		Возврат КлючИЗначение.Ключ;	
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
