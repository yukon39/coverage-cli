#Использовать fs
#Использовать asserts
#Использовать "utils"

// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:NestedFunctionInParameters-off
// BSLLS:MissingVariablesDescription-off

#Область ОписаниеПеременных

Перем Тестер;
Перем КаталогСборки;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ТестДолжен_КонвертироватьJSON_LCOV() Экспорт
	
	КаталогИсходников = ПомощникТестирования.КаталогИсходниковКонфигурацииXML();
	ФорматИсходников = "XML";
	КонвертироватьЗамерыПокрытия(КаталогИсходников, ФорматИсходников);
	
КонецПроцедуры

Процедура ТестДолжен_КонвертироватьEDT_PFF() Экспорт

	КаталогИсходников = ПомощникТестирования.КаталогИсходниковКонфигурацииEDT();
	ФорматИсходников = "EDT";
	КонвертироватьЗамерыПокрытия(КаталогИсходников, ФорматИсходников);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗапускомТеста() Экспорт
	
	КаталогСборки = Тестер.ИмяВременногоФайла();
	ФС.ОбеспечитьПустойКаталог(КаталогСборки);
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	Тестер.УдалитьВременныеФайлы();
	
КонецПроцедуры

Функция ПолучитьСписокТестов(Тестирование) Экспорт
	
	Тестер = Тестирование;

	Тестер.ДобавитьТест("ТестДолжен_КонвертироватьJSON_LCOV");

	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФайлПокрытияJSON()
	Возврат ОбъединитьПути(ПомощникТестирования.КаталогЗамеров(), "coverage.json");
КонецФункции

Процедура КонвертироватьЗамерыПокрытия(КаталогИсходников, ФорматИсходников)

	ИмяФайлаРезультатов = ОбъединитьПути(КаталогСборки, "lcov.info");
	
	Аргументы = Новый Массив;
	ПомощникТестирования.ДобавитьАргументInput(Аргументы, ФайлПокрытияJSON());
	ПомощникТестирования.ДобавитьАргументOutput(Аргументы, ИмяФайлаРезультатов);
	ПомощникТестирования.ДобавитьАргументWorkspace(Аргументы, ПомощникТестирования.КаталогТестовыхДанных());
	ПомощникТестирования.ДобавитьАргументSources(Аргументы, КаталогИсходников);
	ПомощникТестирования.ДобавитьАргументFormat(Аргументы, ФорматИсходников);
	ПомощникТестирования.ДобавитьФорматОтчета(Аргументы, "lcov");
	
	ПомощникТестирования.ВыполнитьКомандуКонвертировать(Аргументы);
	
	Утверждения.ПроверитьИстину(
		ФС.ФайлСуществует(ИмяФайлаРезультатов),
		"Файл с результатами должен существовать");
	
	ЧислоСтрок = ПомощникТестирования.ЧислоСтрокРезультата(ИмяФайлаРезультатов);
	
	Утверждения.ПроверитьРавенство(ЧислоСтрок, 631,
		"Проверка количества строк в результате");

КонецПроцедуры

#КонецОбласти
