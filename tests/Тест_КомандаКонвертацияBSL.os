#Использовать fs
#Использовать asserts
#Использовать "utils"

// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:NestedFunctionInParameters-off
// BSLLS:MissingVariablesDescription-off

#Область ОписаниеПеременных

Перем Тестер;
Перем КаталогСборки;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ТестДолжен_КонвертироватьКонфигурациюXML_BSL() Экспорт
	
	ИмяФайлаНастроекКонвертации = ОбъединитьПути(ПомощникТестирования.КаталогНастроек(), "configurationXML.json");
	КонвертироватьЗамерКонфигурации(ИмяФайлаНастроекКонвертации);
	
КонецПроцедуры

Процедура ТестДолжен_КонвертироватьКонфигурациюEDT_BSL() Экспорт
	
	ИмяФайлаНастроекКонвертации = ОбъединитьПути(ПомощникТестирования.КаталогНастроек(), "configurationEDT.json");
	КонвертироватьЗамерКонфигурации(ИмяФайлаНастроекКонвертации);
	
КонецПроцедуры

Процедура ТестДолжен_КонвертироватьРасширениеXML_BSL() Экспорт
	
	ИмяФайлаНастроекКонвертации = ОбъединитьПути(ПомощникТестирования.КаталогНастроек(), "extensionXML.json");
	КонвертироватьЗамерРасширения(ИмяФайлаНастроекКонвертации);
	
КонецПроцедуры

Процедура ТестДолжен_КонвертироватьРасширениеEDT_BSL() Экспорт
	
	ИмяФайлаНастроекКонвертации = ОбъединитьПути(ПомощникТестирования.КаталогНастроек(), "extensionEDT.json");
	КонвертироватьЗамерРасширения(ИмяФайлаНастроекКонвертации);
	
КонецПроцедуры

Процедура ТестДолжен_КонвертироватьВнешнийМодульXML_BSL() Экспорт
	
	ИмяФайлаНастроекКонвертации = ОбъединитьПути(ПомощникТестирования.КаталогНастроек(), "externalXML.json");
	КонвертироватьЗамерВнешнегоМодуля(ИмяФайлаНастроекКонвертации);
	
КонецПроцедуры

Процедура ТестДолжен_КонвертироватьВнешнийМодульEDT_BSL() Экспорт
	
	ИмяФайлаНастроекКонвертации = ОбъединитьПути(ПомощникТестирования.КаталогНастроек(), "externalEDT.json");
	КонвертироватьЗамерВнешнегоМодуля(ИмяФайлаНастроекКонвертации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗапускомТеста() Экспорт
	
	КаталогСборки = Тестер.ИмяВременногоФайла();
	ФС.ОбеспечитьПустойКаталог(КаталогСборки);
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	Тестер.УдалитьВременныеФайлы();
	
КонецПроцедуры

Функция ПолучитьСписокТестов(Тестирование) Экспорт
	
	Тестер = Тестирование;
	Тестер.ДобавитьТест("ТестДолжен_КонвертироватьКонфигурациюXML_BSL");
	Тестер.ДобавитьТест("ТестДолжен_КонвертироватьКонфигурациюEDT_BSL");
	Тестер.ДобавитьТест("ТестДолжен_КонвертироватьРасширениеXML_BSL");
	Тестер.ДобавитьТест("ТестДолжен_КонвертироватьРасширениеEDT_BSL");
	Тестер.ДобавитьТест("ТестДолжен_КонвертироватьВнешнийМодульXML_BSL");
	Тестер.ДобавитьТест("ТестДолжен_КонвертироватьВнешнийМодульEDT_BSL");
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФайлПокрытияBSL()
	Возврат ОбъединитьПути(ПомощникТестирования.КаталогЗамеров(), "coverage.json");
КонецФункции

Процедура КонвертироватьЗамерКонфигурации(ИмяФайлаНастроекКонвертации)
	
	ИмяФайлаРезультатов = ОбъединитьПути(КаталогСборки, "coverageXML.xml");
	ИмяФайлаПокрытия = ФайлПокрытияBSL();
	
	Аргументы = Новый Массив;
	ПомощникТестирования.ДобавитьАргументInput(Аргументы, ИмяФайлаПокрытия);
	ПомощникТестирования.ДобавитьАргументOutput(Аргументы, ИмяФайлаРезультатов);
	ПомощникТестирования.ДобавитьАргументWorkspace(Аргументы, ПомощникТестирования.КаталогТестовыхДанных());
	ПомощникТестирования.ДобавитьАргументСonfig(Аргументы, ИмяФайлаНастроекКонвертации);
	
	ПомощникТестирования.ВыполнитьКомандуКонвертировать(Аргументы);
	
	Утверждения.ПроверитьИстину(
		ФС.ФайлСуществует(ИмяФайлаРезультатов),
		"Файл с результатами должен существовать");
	
	ЧислоСтрок = ПомощникТестирования.ЧислоСтрокРезультата(ИмяФайлаРезультатов);
	
	Утверждения.ПроверитьРавенство(ЧислоСтрок, 405,
		"Проверка количества строк в результате");
	
КонецПроцедуры

Процедура КонвертироватьЗамерРасширения(ИмяФайлаНастроекКонвертации)
	
	ИмяФайлаРезультатов = ОбъединитьПути(КаталогСборки, "coverageXML.xml");
	ИмяФайлаПокрытия = ФайлПокрытияBSL();
	
	Аргументы = Новый Массив;
	ПомощникТестирования.ДобавитьАргументInput(Аргументы, ИмяФайлаПокрытия);
	ПомощникТестирования.ДобавитьАргументOutput(Аргументы, ИмяФайлаРезультатов);
	ПомощникТестирования.ДобавитьАргументWorkspace(Аргументы, ПомощникТестирования.КаталогТестовыхДанных());
	ПомощникТестирования.ДобавитьАргументСonfig(Аргументы, ИмяФайлаНастроекКонвертации);
	
	ПомощникТестирования.ВыполнитьКомандуКонвертировать(Аргументы);
	
	Утверждения.ПроверитьИстину(
		ФС.ФайлСуществует(ИмяФайлаРезультатов),
		"Файл с результатами должен существовать");
	
	ЧислоСтрок = ПомощникТестирования.ЧислоСтрокРезультата(ИмяФайлаРезультатов);
	
	Утверждения.ПроверитьРавенство(ЧислоСтрок, 11,
		"Проверка количества строк в результате");
	
КонецПроцедуры

Процедура КонвертироватьЗамерВнешнегоМодуля(ИмяФайлаНастроекКонвертации)
	
	ИмяФайлаРезультатов = ОбъединитьПути(КаталогСборки, "coverageXML.xml");
	ИмяФайлаПокрытия = ФайлПокрытияBSL();
	
	Аргументы = Новый Массив;
	ПомощникТестирования.ДобавитьАргументInput(Аргументы, ИмяФайлаПокрытия);
	ПомощникТестирования.ДобавитьАргументOutput(Аргументы, ИмяФайлаРезультатов);
	ПомощникТестирования.ДобавитьАргументWorkspace(Аргументы, ПомощникТестирования.КаталогТестовыхДанных());
	ПомощникТестирования.ДобавитьАргументСonfig(Аргументы, ИмяФайлаНастроекКонвертации);
	
	ПомощникТестирования.ВыполнитьКомандуКонвертировать(Аргументы);
	
	Утверждения.ПроверитьИстину(
		ФС.ФайлСуществует(ИмяФайлаРезультатов),
		"Файл с результатами должен существовать");
	
	ЧислоСтрок = ПомощникТестирования.ЧислоСтрокРезультата(ИмяФайлаРезультатов);
	
	Утверждения.ПроверитьРавенство(ЧислоСтрок, 12,
		"Проверка количества строк в результате");
	
КонецПроцедуры

#КонецОбласти