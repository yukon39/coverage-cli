#Использовать logos

Перем ЛогПриложения;

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает значение лога приложения
//
// Возвращаемое значение:
//   Логирование - Лог приложения
//
Функция Лог() Экспорт
	
	Если ЛогПриложения = Неопределено Тогда
		ЛогПриложения = Логирование.ПолучитьЛог(ИмяЛогаПриложения());
	КонецЕсли;
	
	Возврат ЛогПриложения;
	
КонецФункции

// Устанавливает уровень лога в режим отладки
//
Процедура ВключитьРежимОтладки() Экспорт
	Лог().УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

// Возвращает каталог приложения
//
//  Возвращаемое значение:
//   Строка - Корневой каталог текущего приложения
//
Функция КаталогПриложения() Экспорт
	
	ПутьККаталогу = ОбъединитьПути(ТекущийСценарий().Каталог, "..", "..", "..");
	ФайлКаталога = Новый Файл(ПутьККаталогу);
	Возврат ФайлКаталога.ПолноеИмя;
	
КонецФункции

// Возвращает текущую версию приложения
//
//  Возвращаемое значение:
//   Строка - Текущая версия приложения
//
Функция ВерсияПриложения() Экспорт
	Возврат "1.2.0";
КонецФункции

// Возвращает имя приложения
//
//  Возвращаемое значение:
//   Строка - Имя приложения
//
Функция ИмяПриложения() Экспорт
	Возврат "coverage-cli";
КонецФункции

Функция ВерсияCoverage41C() Экспорт
	Возврат "2.7.2";
КонецФункции

Функция КаталогCoverage41C() Экспорт
	
	КаталогВерсии = СтрШаблон("Coverage41C-%1", ВерсияCoverage41C());
	Возврат ОбъединитьПути(КаталогБиблиотеки(), "vendor", КаталогВерсии);
	
КонецФункции

Функция ЭтоWindows() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ВерсияОС = НРег(СистемнаяИнформация.ВерсияОС);
	Возврат СтрНайти(ВерсияОС, "windows") > 0;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяЛогаПриложения()
	Возврат СтрШаблон("oscript.app.%1", ИмяПриложения());
КонецФункции

Функция КаталогБиблиотеки()
	
	КаталогСценария = ТекущийСценарий().Каталог;
	ПутьККаталогу = ОбъединитьПути(КаталогСценария, "..", "..", "..");
	ФайлКаталога = Новый Файл(ПутьККаталогу);
	Возврат ФайлКаталога.ПолноеИмя;
	
КонецФункции

#КонецОбласти
